{"pages":[{"url":"http://www.instantinate.com/pages/about_nate.html","text":"What kind of guy names a blog \"Instanti-nate\" anyway? Well you wanted to know so here goes. Born. Eats. Sleeps. Works. Ta-da!","tags":"Pages","loc":"http://www.instantinate.com/pages/about_nate.html","title":"About Nate"},{"url":"http://www.instantinate.com/python-data-wrangling/Test_Article_Publishing.html","text":"```python { \"cells\": [ { \"cell_type\": \"code\", \"execution_count\": 4, \"metadata\": { \"collapsed\": false }, \"outputs\": [], \"source\": [ \"# Dictionary of movies\\n\", \"\\n\", \"movies = [\\n\", \"{\\n\", \"\\\"name\\\": \\\"Usual Suspects\\\", \\n\", \"\\\"imdb\\\": 7.0,\\n\", \"\\\"category\\\": \\\"Thriller\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"Hitman\\\",\\n\", \"\\\"imdb\\\": 6.3,\\n\", \"\\\"category\\\": \\\"Action\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"Dark Knight\\\",\\n\", \"\\\"imdb\\\": 9.0,\\n\", \"\\\"category\\\": \\\"Adventure\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"The Help\\\",\\n\", \"\\\"imdb\\\": 8.0,\\n\", \"\\\"category\\\": \\\"Drama\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"The Choice\\\",\\n\", \"\\\"imdb\\\": 6.2,\\n\", \"\\\"category\\\": \\\"Romance\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"Colonia\\\",\\n\", \"\\\"imdb\\\": 7.4,\\n\", \"\\\"category\\\": \\\"Romance\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"Love\\\",\\n\", \"\\\"imdb\\\": 6.0,\\n\", \"\\\"category\\\": \\\"Romance\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"Bride Wars\\\",\\n\", \"\\\"imdb\\\": 5.4,\\n\", \"\\\"category\\\": \\\"Romance\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"AlphaJet\\\",\\n\", \"\\\"imdb\\\": 3.2,\\n\", \"\\\"category\\\": \\\"War\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"Ringing Crime\\\",\\n\", \"\\\"imdb\\\": 4.0,\\n\", \"\\\"category\\\": \\\"Crime\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"Joking muck\\\",\\n\", \"\\\"imdb\\\": 7.2,\\n\", \"\\\"category\\\": \\\"Comedy\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"What is the name\\\",\\n\", \"\\\"imdb\\\": 9.2,\\n\", \"\\\"category\\\": \\\"Suspense\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"Detective\\\",\\n\", \"\\\"imdb\\\": 7.0,\\n\", \"\\\"category\\\": \\\"Suspense\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"Exam\\\",\\n\", \"\\\"imdb\\\": 4.2,\\n\", \"\\\"category\\\": \\\"Thriller\\\"\\n\", \"},\\n\", \"{\\n\", \"\\\"name\\\": \\\"We Two\\\",\\n\", \"\\\"imdb\\\": 7.2,\\n\", \"\\\"category\\\": \\\"Romance\\\"\\n\", \"}\\n\", \"]\" ] }, { \"cell_type\": \"code\", \"execution_count\": 5, \"metadata\": { \"collapsed\": false }, \"outputs\": [], \"source\": [ \"# Write a function that takes a single movie and \\n\", \"# returns True if its IMDB score is above 5.5\" ] }, { \"cell_type\": \"code\", \"execution_count\": 6, \"metadata\": { \"collapsed\": false }, \"outputs\": [], \"source\": [ \"def checkScoreGreater():\\n\", \" for x in movies:\\n\", \" if x[\\\"imdb\\\"] > 5.5:\\n\", \" print x['name'], x['imdb'], True\\n\", \" else:\\n\", \" print x['name'], x['imdb'], False\" ] }, { \"cell_type\": \"code\", \"execution_count\": 7, \"metadata\": { \"collapsed\": false }, \"outputs\": [ { \"name\": \"stdout\", \"output_type\": \"stream\", \"text\": [ \"Usual Suspects 7.0 True\\n\", \"Hitman 6.3 True\\n\", \"Dark Knight 9.0 True\\n\", \"The Help 8.0 True\\n\", \"The Choice 6.2 True\\n\", \"Colonia 7.4 True\\n\", \"Love 6.0 True\\n\", \"Bride Wars 5.4 False\\n\", \"AlphaJet 3.2 False\\n\", \"Ringing Crime 4.0 False\\n\", \"Joking muck 7.2 True\\n\", \"What is the name 9.2 True\\n\", \"Detective 7.0 True\\n\", \"Exam 4.2 False\\n\", \"We Two 7.2 True\\n\" ] } ], \"source\": [ \"checkScoreGreater()\" ] }, { \"cell_type\": \"code\", \"execution_count\": 8, \"metadata\": { \"collapsed\": false }, \"outputs\": [], \"source\": [ \"# Write a function that returns a sublist of movies \\n\", \"# with an IMDB score above 5.5. \" ] }, { \"cell_type\": \"code\", \"execution_count\": 9, \"metadata\": { \"collapsed\": true }, \"outputs\": [], \"source\": [ \"#import numpy as np\\n\", \"def score_list():\\n\", \" scores_above_five_name = []\\n\", \" scores_above_five_score = []\\n\", \" for x in movies:\\n\", \" if x[\\\"imdb\\\"] > 5.5:\\n\", \" scores_above_five_name.append(x['name'])\\n\", \" if x[\\\"imdb\\\"] > 5.5:\\n\", \" scores_above_five_score.append(x['imdb'])\\n\", \" #score_array = np.array([scores_above_five_name, scores_above_five_score])\\n\", \" #print score_array\\n\", \" print dict(zip(scores_above_five_name, scores_above_five_score))\" ] }, { \"cell_type\": \"code\", \"execution_count\": 10, \"metadata\": { \"collapsed\": false }, \"outputs\": [ { \"name\": \"stdout\", \"output_type\": \"stream\", \"text\": [ \"{'Detective': 7.0, 'Love': 6.0, 'Colonia': 7.4, 'We Two': 7.2, 'Hitman': 6.3, 'Usual Suspects': 7.0, 'Dark Knight': 9.0, 'What is the name': 9.2, 'The Help': 8.0, 'The Choice': 6.2, 'Joking muck': 7.2}\\n\" ] } ], \"source\": [ \"score_list()\" ] }, { \"cell_type\": \"code\", \"execution_count\": 43, \"metadata\": { \"collapsed\": false }, \"outputs\": [], \"source\": [ \"# Write a function that takes a category name and returns \\n\", \"# just those movies under that category.\" ] }, { \"cell_type\": \"code\", \"execution_count\": 44, \"metadata\": { \"collapsed\": false }, \"outputs\": [ { \"name\": \"stdout\", \"output_type\": \"stream\", \"text\": [ \"Hitman\\n\" ] } ], \"source\": [ \"for x in movies:\\n\", \" if x[\\\"category\\\"] == \\\"Action\\\":\\n\", \" print x[\\\"name\\\"]\" ] }, { \"cell_type\": \"code\", \"execution_count\": 45, \"metadata\": { \"collapsed\": false }, \"outputs\": [], \"source\": [ \"# Write a function that takes a list of movies and computes \\n\", \"# the average IMDB score.\" ] }, { \"cell_type\": \"code\", \"execution_count\": 46, \"metadata\": { \"collapsed\": true }, \"outputs\": [], \"source\": [ \"def movie_avg():\\n\", \" movie_avg = []\\n\", \" for x in movies:\\n\", \" movie_avg.append(x['imdb'])\\n\", \" print sum(movie_avg)/len(movie_avg)\" ] }, { \"cell_type\": \"code\", \"execution_count\": 47, \"metadata\": { \"collapsed\": false }, \"outputs\": [ { \"name\": \"stdout\", \"output_type\": \"stream\", \"text\": [ \"6.48666666667\\n\" ] } ], \"source\": [ \"movie_avg()\" ] }, { \"cell_type\": \"code\", \"execution_count\": 48, \"metadata\": { \"collapsed\": false }, \"outputs\": [], \"source\": [ \"# Write a function that takes a category and computes \\n\", \"# the average IMDB score (HINT: reuse the function \\n\", \"# from question 2.)\" ] }, { \"cell_type\": \"code\", \"execution_count\": 49, \"metadata\": { \"collapsed\": true }, \"outputs\": [], \"source\": [ \"def romance_avg(cat):\\n\", \" romance_avg = []\\n\", \" for x in movies:\\n\", \" if cat == x[\\\"category\\\"]:\\n\", \" romance_avg.append(x['imdb'])\\n\", \" print sum(romance_avg)/len(romance_avg)\" ] }, { \"cell_type\": \"code\", \"execution_count\": 50, \"metadata\": { \"collapsed\": false }, \"outputs\": [ { \"name\": \"stdout\", \"output_type\": \"stream\", \"text\": [ \"6.3\\n\" ] } ], \"source\": [ \"romance_avg(\\\"Action\\\")\" ] } ], \"metadata\": { \"anaconda-cloud\": {}, \"kernelspec\": { \"display_name\": \"Python [Root]\", \"language\": \"python\", \"name\": \"Python [Root]\" }, \"language_info\": { \"codemirror_mode\": { \"name\": \"ipython\", \"version\": 2 }, \"file_extension\": \".py\", \"mimetype\": \"text/x-python\", \"name\": \"python\", \"nbconvert_exporter\": \"python\", \"pygments_lexer\": \"ipython2\", \"version\": \"2.7.12\" } }, \"nbformat\": 4, \"nbformat_minor\": 0 } ~~~","tags":"'Python', 'Data Wrangling'","loc":"http://www.instantinate.com/python-data-wrangling/Test_Article_Publishing.html","title":"Test_Article_Publishing"},{"url":"http://www.instantinate.com/command-line/covert_all_ipynb_to_html.html","text":"Note: This code has been commented out. To run the code, remove the comments. # %%bash # #!/bin/bash # sets the working directory to the current directory # acd \"$(dirname \"$0\")\" # converts all Jupyter Notebook files to basic html # for f in *.ipynb; do jupyter nbconvert --to html --template basic $f; done [NbConvertApp] Converting notebook covert_all_ipynb_to_html.ipynb to html [NbConvertApp] Writing 2632 bytes to covert_all_ipynb_to_html.html [NbConvertApp] Converting notebook list_all_files_and_folders_in_a_directory.ipynb to html [NbConvertApp] Writing 2153 bytes to list_all_files_and_folders_in_a_directory.html [NbConvertApp] Converting notebook open_ipython_nb_in_nondefault_browser.ipynb to html [NbConvertApp] Writing 1552 bytes to open_ipython_nb_in_nondefault_browser.html","tags":"Command Line","loc":"http://www.instantinate.com/command-line/covert_all_ipynb_to_html.html","title":"Convert All Jupyter Notebooks In A Folder To Basic HTML Using Bash"},{"url":"http://www.instantinate.com/command-line/list_all_files_and_folders_in_a_directory.html","text":"%% bash -- out output # Line above: Run bash, with the output being a python variable called 'output' # Change the working directory to the current directory cd \"$(dirname \" $ 0 \")\" # For all filenames, print the filename, then end for f in * ; do echo \"$f\" ; done # Print the variable with the filenames print ( output ) list_all_files_and_folders_in_a_directory.ipynb","tags":"Command Line","loc":"http://www.instantinate.com/command-line/list_all_files_and_folders_in_a_directory.html","title":"List All Files And Folders In A Directory"},{"url":"http://www.instantinate.com/command-line/open_ipython_nb_in_nondefault_browser.html","text":"By default Jupyter Notebooks loads in your default browser. The following bash script opens Jupyter Notebook in a specific browser (in this example, Chrome). Note: I have commented out all the commands so it doesn't run while in Jupyter # %%bash # Set the bash hashbang # #!/bin/bash # Open IPython Notebook using Chrome # BROWSER=/Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome jupyter notebook","tags":"Command Line","loc":"http://www.instantinate.com/command-line/open_ipython_nb_in_nondefault_browser.html","title":"Load Jupyter Notebook In Non-Default Browser"},{"url":"http://www.instantinate.com/test/new-thingy.html","text":"Cool awesone!!!!!! new!!!!!","tags":"Test","loc":"http://www.instantinate.com/test/new-thingy.html","title":"new thingy"},{"url":"http://www.instantinate.com/test/thinger-mabober.html","text":"thinger mabober","tags":"Test","loc":"http://www.instantinate.com/test/thinger-mabober.html","title":"thinger mabober"}]}